#!/usr/bin/env ruby
require 'syslog'
require 'net/http'
require 'uri'

# Use syslog since the output of this script is usually sent to /dev/null 
def fail(message) 
  Syslog.open("forge-git") do |syslog|
    syslog.err message
  end
  puts message
  exit 1
end
begin
  # Load config settings...
  config_file = File.expand_path("~/.forge-git-config");  
  load config_file if File.exist?(config_file)
  FORGE_URL="http://127.0.0.1/forge" unless defined? FORGE_URL
  GIT_REPOS_DIR="/var/forge/git/repos" unless defined? GIT_REPOS_DIR

  # load script input args.
  fail "User argument not supplied." unless ARGV[0]
  user = ARGV[0]

  fail "#{user}: SSH_ORIGINAL_COMMAND environment variable not supplied." unless ENV['SSH_ORIGINAL_COMMAND']
  ssh_command = ENV['SSH_ORIGINAL_COMMAND']

  # parse the ssh command.. only git commands allowed.
  ALLOWED_GIT_COMMANDS  = /^(git-upload-pack|git upload-pack|git-receive-pack|git receive-pack) '\/?([a-z]+)\.git'$/
  fail "#{user}: Not a supported git command: #{ssh_command}" unless ssh_command =~ ALLOWED_GIT_COMMANDS 
  git_command = $1
  project = $2

  # TODO:
  # Hit the Forge App to ask it if the user is allowed to acces the git repo.
  uri = URI.parse("#{FORGE_URL}/projects/#{project.upcase}/has_git_access/#{user}")
  response = Net::HTTP.get(uri)
  fail "#{user}: Does not have access to git repo #{project}.git" unless response == 'true'

  #
  # Looks like we can let the user execute the command.
  GIT = 'git' unless defined? GIT
  
  Syslog.open("forge-git") do |syslog|
    syslog.info "#{user}: executing: #{GIT} shell -c \"#{git_command} '#{GIT_REPOS_DIR}/#{project}.git'\""
  end
    
  exec(GIT, 'shell', '-c', "#{git_command} '#{GIT_REPOS_DIR}/#{project}.git'")
  fail('#{user}: Cannot execute git-shell.')
rescue => e 
  fail("Unexpected failure: #{e}")
end
